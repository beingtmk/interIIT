# Generated by Django 2.0.7 on 2018-11-05 11:53

import Schedule.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import imagekit.models.fields
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='Athletics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='my date')),
                ('time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('place', models.CharField(max_length=256, null=True)),
                ('game_status', models.CharField(default=-1, max_length=256, null=True)),
                ('score_detail', models.TextField(blank=True, max_length=256)),
                ('game_level', models.CharField(choices=[('Heat 1', 'Heat 1'), ('SemiFinal 1', 'SemiFinal 1'), ('SemiFinal 2', 'SemiFinal 1'), ('Finals', 'Finals'), ('Round 1', 'Round 1'), ('Quarter Final', 'Quarter Final'), ('Semi Final', 'Semi Final'), ('Final', 'Final'), ('Pool A', 'Pool A'), ('Pool B', 'PoolB'), ('Pool C', 'Pool C'), ('Pool D', 'Pool D'), ('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C'), ('Group D', 'Group D'), ('TTF', 'TTF')], max_length=256, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AthleticsScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gold', models.IntegerField(default='0')),
                ('silver', models.IntegerField(default='0')),
                ('bronze', models.IntegerField(default='0')),
                ('fourth', models.IntegerField(default='0')),
                ('points', models.IntegerField(default='0')),
            ],
        ),
        migrations.CreateModel(
            name='Badminton',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='my date')),
                ('time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('place', models.CharField(max_length=256, null=True)),
                ('score_detail', models.TextField(blank=True, max_length=256)),
                ('game_level', models.CharField(choices=[('Heat 1', 'Heat 1'), ('SemiFinal 1', 'SemiFinal 1'), ('SemiFinal 2', 'SemiFinal 1'), ('Finals', 'Finals'), ('Round 1', 'Round 1'), ('Quarter Final', 'Quarter Final'), ('Semi Final', 'Semi Final'), ('Final', 'Final'), ('Pool A', 'Pool A'), ('Pool B', 'PoolB'), ('Pool C', 'Pool C'), ('Pool D', 'Pool D'), ('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C'), ('Group D', 'Group D'), ('TTF', 'TTF')], max_length=256, null=True)),
                ('score_team1', models.IntegerField(default='-1')),
                ('score_team2', models.IntegerField(default='-1')),
                ('game_status', models.IntegerField(default='-1')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BadmintonScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_played', models.IntegerField(default='0')),
                ('lose', models.IntegerField(default='0')),
                ('win', models.IntegerField(default='0')),
                ('points', models.IntegerField(default='0')),
            ],
        ),
        migrations.CreateModel(
            name='Basketball',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='my date')),
                ('time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('place', models.CharField(max_length=256, null=True)),
                ('game_status', models.CharField(default=-1, max_length=256, null=True)),
                ('score_detail', models.TextField(blank=True, max_length=256)),
                ('game_level', models.CharField(choices=[('Heat 1', 'Heat 1'), ('SemiFinal 1', 'SemiFinal 1'), ('SemiFinal 2', 'SemiFinal 1'), ('Finals', 'Finals'), ('Round 1', 'Round 1'), ('Quarter Final', 'Quarter Final'), ('Semi Final', 'Semi Final'), ('Final', 'Final'), ('Pool A', 'Pool A'), ('Pool B', 'PoolB'), ('Pool C', 'Pool C'), ('Pool D', 'Pool D'), ('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C'), ('Group D', 'Group D'), ('TTF', 'TTF')], max_length=256, null=True)),
                ('score_team1', models.IntegerField(default='-1')),
                ('score_team2', models.IntegerField(default='-1')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BasketballScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_played', models.IntegerField(default='0')),
                ('lose', models.IntegerField(default='0')),
                ('win', models.IntegerField(default='0')),
                ('points', models.IntegerField(default='0')),
            ],
        ),
        migrations.CreateModel(
            name='Cricket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='my date')),
                ('time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('place', models.CharField(max_length=256, null=True)),
                ('game_status', models.CharField(default=-1, max_length=256, null=True)),
                ('score_detail', models.TextField(blank=True, max_length=256)),
                ('game_level', models.CharField(choices=[('Heat 1', 'Heat 1'), ('SemiFinal 1', 'SemiFinal 1'), ('SemiFinal 2', 'SemiFinal 1'), ('Finals', 'Finals'), ('Round 1', 'Round 1'), ('Quarter Final', 'Quarter Final'), ('Semi Final', 'Semi Final'), ('Final', 'Final'), ('Pool A', 'Pool A'), ('Pool B', 'PoolB'), ('Pool C', 'Pool C'), ('Pool D', 'Pool D'), ('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C'), ('Group D', 'Group D'), ('TTF', 'TTF')], max_length=256, null=True)),
                ('score_team1', models.IntegerField(default='-1')),
                ('score_team2', models.IntegerField(default='-1')),
                ('wicket_team1', models.IntegerField(default='-1')),
                ('wicket_team2', models.IntegerField(default='-1')),
                ('over_team1', models.IntegerField(default='-1')),
                ('over_team2', models.IntegerField(default='-1')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CricketScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_played', models.IntegerField(default='0')),
                ('lose', models.IntegerField(default='0')),
                ('win', models.IntegerField(default='0')),
                ('points', models.IntegerField(default='0')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sport', models.CharField(choices=[('athletics', 'Athletics'), ('badminton', 'Badminton'), ('basketball', 'Basketball'), ('cricket', 'Cricket'), ('football', 'Football'), ('hockey', 'Hockey'), ('squash', 'Squash'), ('tennis', 'Tennis'), ('table_tennis', 'Table Tennis'), ('volleyball', 'Volleyball'), ('weight_lifting', 'Weight Lifting'), ('water_polo', 'Water Polo'), ('swimming', 'Swimming')], max_length=20)),
                ('event', models.CharField(max_length=30)),
                ('code', models.CharField(default='DEFAULT', max_length=8)),
                ('is_relay', models.BooleanField(default=False)),
                ('is_women', models.BooleanField(default=True)),
                ('is_men', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Football',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='my date')),
                ('time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('place', models.CharField(max_length=256, null=True)),
                ('game_status', models.CharField(default=-1, max_length=256, null=True)),
                ('score_detail', models.TextField(blank=True, max_length=256)),
                ('game_level', models.CharField(choices=[('Heat 1', 'Heat 1'), ('SemiFinal 1', 'SemiFinal 1'), ('SemiFinal 2', 'SemiFinal 1'), ('Finals', 'Finals'), ('Round 1', 'Round 1'), ('Quarter Final', 'Quarter Final'), ('Semi Final', 'Semi Final'), ('Final', 'Final'), ('Pool A', 'Pool A'), ('Pool B', 'PoolB'), ('Pool C', 'Pool C'), ('Pool D', 'Pool D'), ('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C'), ('Group D', 'Group D'), ('TTF', 'TTF')], max_length=256, null=True)),
                ('score_team1', models.IntegerField(default='-1')),
                ('score_team2', models.IntegerField(default='-1')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Event')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FootballScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_played', models.IntegerField(default='0')),
                ('lose', models.IntegerField(default='0')),
                ('win', models.IntegerField(default='0')),
                ('points', models.IntegerField(default='0')),
            ],
        ),
        migrations.CreateModel(
            name='Hockey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='my date')),
                ('time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('place', models.CharField(max_length=256, null=True)),
                ('game_status', models.CharField(default=-1, max_length=256, null=True)),
                ('score_detail', models.TextField(blank=True, max_length=256)),
                ('game_level', models.CharField(choices=[('Heat 1', 'Heat 1'), ('SemiFinal 1', 'SemiFinal 1'), ('SemiFinal 2', 'SemiFinal 1'), ('Finals', 'Finals'), ('Round 1', 'Round 1'), ('Quarter Final', 'Quarter Final'), ('Semi Final', 'Semi Final'), ('Final', 'Final'), ('Pool A', 'Pool A'), ('Pool B', 'PoolB'), ('Pool C', 'Pool C'), ('Pool D', 'Pool D'), ('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C'), ('Group D', 'Group D'), ('TTF', 'TTF')], max_length=256, null=True)),
                ('score_team1', models.IntegerField(default='-1')),
                ('score_team2', models.IntegerField(default='-1')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Event')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HockeyScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_played', models.IntegerField(default='0')),
                ('lose', models.IntegerField(default='0')),
                ('win', models.IntegerField(default='0')),
                ('points', models.IntegerField(default='0')),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('urls', models.URLField(max_length=1000)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('album', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('blood_group', models.CharField(choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5, null=True)),
                ('mobile_no', phonenumber_field.modelfields.PhoneNumberField(max_length=128)),
                ('email', models.EmailField(max_length=254)),
                ('photo', imagekit.models.fields.ProcessedImageField(default=None, null=True, upload_to=Schedule.models.Person.path_and_rename, validators=[Schedule.models.Person.validate_image])),
                ('food', models.CharField(choices=[('VEGETARIAN', 'Vegetarian'), ('NON-VEGETARIAN', 'Non-Vegetarian')], default=None, max_length=20)),
                ('nationality', models.CharField(default='Indian', max_length=20)),
                ('approved_status', models.BooleanField(default=False)),
                ('event', models.ManyToManyField(to='Schedule.Event')),
                ('images', models.ManyToManyField(blank=True, to='Schedule.Photo')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlayerAthletics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.IntegerField(default=-1)),
                ('medal', models.CharField(blank=True, choices=[('GOLD', 'GOLD'), ('SILVER', 'SILVER'), ('BRONZE', 'BRONZE'), ('FOURTH', 'FOURTH')], max_length=256)),
                ('update_count', models.IntegerField(default=0)),
                ('athletics', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='Schedule.Athletics')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerBadminton',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=-1)),
                ('badminton', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='Schedule.Badminton')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerBasketball',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=-1)),
                ('basketball', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='Schedule.Basketball')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerCricket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=-1)),
                ('cricket', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='Schedule.Cricket')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerFootball',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=-1)),
                ('football', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='Schedule.Football')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerHockey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=-1)),
                ('hockey', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='Schedule.Hockey')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerSquash',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=-1)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerSwimming',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.CharField(default='-1', max_length=500)),
                ('medal', models.CharField(blank=True, choices=[('GOLD', 'GOLD'), ('SILVER', 'SILVER'), ('BRONZE', 'BRONZE'), ('FOURTH', 'FOURTH')], max_length=256)),
                ('update_count', models.IntegerField(default=0)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player')),
            ],
            options={
                'ordering': ['time'],
            },
        ),
        migrations.CreateModel(
            name='PlayerTableTennis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=-1)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerTennis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=-1)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerVolleyball',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=-1)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerWaterPolo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField(default=-1)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player')),
            ],
        ),
        migrations.CreateModel(
            name='PlayerWeightLifting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.IntegerField(default=-1)),
                ('medal', models.CharField(blank=True, choices=[('GOLD', 'GOLD'), ('SILVER', 'SILVER'), ('BRONZE', 'BRONZE'), ('FOURTH', 'FOURTH')], max_length=256)),
                ('update_count', models.IntegerField(default=0)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player')),
            ],
            options={
                'ordering': ['time'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_type', models.CharField(choices=[('STAFF', 'STAFF'), ('ADMIN', 'ADMIN')], default='STAFF', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Squash',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='my date')),
                ('time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('place', models.CharField(max_length=256, null=True)),
                ('game_status', models.CharField(default=-1, max_length=256, null=True)),
                ('score_detail', models.TextField(blank=True, max_length=256)),
                ('game_level', models.CharField(choices=[('Heat 1', 'Heat 1'), ('SemiFinal 1', 'SemiFinal 1'), ('SemiFinal 2', 'SemiFinal 1'), ('Finals', 'Finals'), ('Round 1', 'Round 1'), ('Quarter Final', 'Quarter Final'), ('Semi Final', 'Semi Final'), ('Final', 'Final'), ('Pool A', 'Pool A'), ('Pool B', 'PoolB'), ('Pool C', 'Pool C'), ('Pool D', 'Pool D'), ('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C'), ('Group D', 'Group D'), ('TTF', 'TTF')], max_length=256, null=True)),
                ('score_team1', models.IntegerField(default='-1')),
                ('score_team2', models.IntegerField(default='-1')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Event')),
                ('player', models.ManyToManyField(through='Schedule.PlayerSquash', to='Schedule.Player')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SquashScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_played', models.IntegerField(default='0')),
                ('lose', models.IntegerField(default='0')),
                ('win', models.IntegerField(default='0')),
                ('points', models.IntegerField(default='0')),
            ],
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('blood_group', models.CharField(choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5, null=True)),
                ('mobile_no', phonenumber_field.modelfields.PhoneNumberField(max_length=128)),
                ('email', models.EmailField(max_length=254)),
                ('photo', imagekit.models.fields.ProcessedImageField(default=None, null=True, upload_to=Schedule.models.Person.path_and_rename, validators=[Schedule.models.Person.validate_image])),
                ('food', models.CharField(choices=[('VEGETARIAN', 'Vegetarian'), ('NON-VEGETARIAN', 'Non-Vegetarian')], default=None, max_length=20)),
                ('nationality', models.CharField(default='Indian', max_length=20)),
                ('type', models.CharField(choices=[('coach', 'COACH'), ('sports_officer', 'SPORTS OFFICER'), ('pti', 'PTI'), ('supporting_staff', 'SUPPORTING STAFF')], max_length=20)),
                ('sport', models.CharField(choices=[('athletics', 'Athletics'), ('badminton', 'Badminton'), ('basketball', 'Basketball'), ('cricket', 'Cricket'), ('football', 'Football'), ('hockey', 'Hockey'), ('squash', 'Squash'), ('tennis', 'Tennis'), ('table_tennis', 'Table Tennis'), ('volleyball', 'Volleyball'), ('weight_lifting', 'Weight Lifting'), ('water_polo', 'Water Polo'), ('swimming', 'Swimming')], max_length=20)),
                ('arrival_date', models.DateField()),
                ('departure_date', models.DateField()),
                ('arrival_time', models.TimeField()),
                ('departure_time', models.TimeField()),
                ('arrival_mode', models.CharField(choices=[('train', 'Train'), ('flight', 'Flight')], max_length=20)),
                ('departure_mode', models.CharField(choices=[('train', 'Train'), ('flight', 'Flight')], max_length=20)),
                ('arrival_transport_id', models.CharField(max_length=100)),
                ('departure_transport_id', models.CharField(max_length=100)),
                ('arrival_place', models.CharField(max_length=100)),
                ('departure_place', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Swimming',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='my date')),
                ('time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('place', models.CharField(max_length=256, null=True)),
                ('game_status', models.CharField(default=-1, max_length=256, null=True)),
                ('score_detail', models.TextField(blank=True, max_length=256)),
                ('game_level', models.CharField(choices=[('Heat 1', 'Heat 1'), ('SemiFinal 1', 'SemiFinal 1'), ('SemiFinal 2', 'SemiFinal 1'), ('Finals', 'Finals'), ('Round 1', 'Round 1'), ('Quarter Final', 'Quarter Final'), ('Semi Final', 'Semi Final'), ('Final', 'Final'), ('Pool A', 'Pool A'), ('Pool B', 'PoolB'), ('Pool C', 'Pool C'), ('Pool D', 'Pool D'), ('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C'), ('Group D', 'Group D'), ('TTF', 'TTF')], max_length=256, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Event')),
                ('player', models.ManyToManyField(through='Schedule.PlayerSwimming', to='Schedule.Player')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SwimmingScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gold', models.IntegerField(default='0')),
                ('silver', models.IntegerField(default='0')),
                ('bronze', models.IntegerField(default='0')),
                ('fourth', models.IntegerField(default='0')),
                ('points', models.IntegerField(default='0')),
            ],
        ),
        migrations.CreateModel(
            name='TableTennis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='my date')),
                ('time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('place', models.CharField(max_length=256, null=True)),
                ('game_status', models.CharField(default=-1, max_length=256, null=True)),
                ('score_detail', models.TextField(blank=True, max_length=256)),
                ('game_level', models.CharField(choices=[('Heat 1', 'Heat 1'), ('SemiFinal 1', 'SemiFinal 1'), ('SemiFinal 2', 'SemiFinal 1'), ('Finals', 'Finals'), ('Round 1', 'Round 1'), ('Quarter Final', 'Quarter Final'), ('Semi Final', 'Semi Final'), ('Final', 'Final'), ('Pool A', 'Pool A'), ('Pool B', 'PoolB'), ('Pool C', 'Pool C'), ('Pool D', 'Pool D'), ('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C'), ('Group D', 'Group D'), ('TTF', 'TTF')], max_length=256, null=True)),
                ('score_team1', models.IntegerField(default='-1')),
                ('score_team2', models.IntegerField(default='-1')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Event')),
                ('player', models.ManyToManyField(through='Schedule.PlayerTableTennis', to='Schedule.Player')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TableTennisScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_played', models.IntegerField(default='0')),
                ('lose', models.IntegerField(default='0')),
                ('win', models.IntegerField(default='0')),
                ('points', models.IntegerField(default='0')),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('college', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Tennis',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='my date')),
                ('time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('place', models.CharField(max_length=256, null=True)),
                ('game_status', models.CharField(default=-1, max_length=256, null=True)),
                ('score_detail', models.TextField(blank=True, max_length=256)),
                ('game_level', models.CharField(choices=[('Heat 1', 'Heat 1'), ('SemiFinal 1', 'SemiFinal 1'), ('SemiFinal 2', 'SemiFinal 1'), ('Finals', 'Finals'), ('Round 1', 'Round 1'), ('Quarter Final', 'Quarter Final'), ('Semi Final', 'Semi Final'), ('Final', 'Final'), ('Pool A', 'Pool A'), ('Pool B', 'PoolB'), ('Pool C', 'Pool C'), ('Pool D', 'Pool D'), ('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C'), ('Group D', 'Group D'), ('TTF', 'TTF')], max_length=256, null=True)),
                ('score_team1', models.IntegerField(default='-1')),
                ('score_team2', models.IntegerField(default='-1')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Event')),
                ('player', models.ManyToManyField(through='Schedule.PlayerTennis', to='Schedule.Player')),
                ('team1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team1_tennis', to='Schedule.Team')),
                ('team2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team2_tennis', to='Schedule.Team')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TennisScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_played', models.IntegerField(default='0')),
                ('lose', models.IntegerField(default='0')),
                ('win', models.IntegerField(default='0')),
                ('points', models.IntegerField(default='0')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_tennis', to='Schedule.Team')),
            ],
        ),
        migrations.CreateModel(
            name='Trivia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('brief', models.CharField(max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Volleyball',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='my date')),
                ('time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('place', models.CharField(max_length=256, null=True)),
                ('game_status', models.CharField(default=-1, max_length=256, null=True)),
                ('score_detail', models.TextField(blank=True, max_length=256)),
                ('score_team1', models.IntegerField(default='-1')),
                ('score_team2', models.IntegerField(default='-1')),
                ('game_level', models.CharField(choices=[('Heat 1', 'Heat 1'), ('SemiFinal 1', 'SemiFinal 1'), ('SemiFinal 2', 'SemiFinal 1'), ('Finals', 'Finals'), ('Round 1', 'Round 1'), ('Quarter Final', 'Quarter Final'), ('Semi Final', 'Semi Final'), ('Final', 'Final'), ('Pool A', 'Pool A'), ('Pool B', 'PoolB'), ('Pool C', 'Pool C'), ('Pool D', 'Pool D'), ('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C'), ('Group D', 'Group D'), ('TTF', 'TTF')], max_length=256, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Event')),
                ('player', models.ManyToManyField(through='Schedule.PlayerVolleyball', to='Schedule.Player')),
                ('team1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team1_volleyball', to='Schedule.Team')),
                ('team2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team2_volleyball', to='Schedule.Team')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VolleyballScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_played', models.IntegerField(default='0')),
                ('lose', models.IntegerField(default='0')),
                ('win', models.IntegerField(default='0')),
                ('points', models.IntegerField(default='0')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_volleyball', to='Schedule.Team')),
            ],
        ),
        migrations.CreateModel(
            name='WaterPolo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='my date')),
                ('time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('place', models.CharField(max_length=256, null=True)),
                ('game_status', models.CharField(default=-1, max_length=256, null=True)),
                ('score_detail', models.TextField(blank=True, max_length=256)),
                ('game_level', models.CharField(choices=[('Heat 1', 'Heat 1'), ('SemiFinal 1', 'SemiFinal 1'), ('SemiFinal 2', 'SemiFinal 1'), ('Finals', 'Finals'), ('Round 1', 'Round 1'), ('Quarter Final', 'Quarter Final'), ('Semi Final', 'Semi Final'), ('Final', 'Final'), ('Pool A', 'Pool A'), ('Pool B', 'PoolB'), ('Pool C', 'Pool C'), ('Pool D', 'Pool D'), ('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C'), ('Group D', 'Group D'), ('TTF', 'TTF')], max_length=256, null=True)),
                ('score_team1', models.IntegerField(default='-1')),
                ('score_team2', models.IntegerField(default='-1')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Event')),
                ('team1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team1_water_polo', to='Schedule.Team')),
                ('team2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team2_water_polo', to='Schedule.Team')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WaterPoloScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_played', models.IntegerField(default='0')),
                ('lose', models.IntegerField(default='0')),
                ('win', models.IntegerField(default='0')),
                ('points', models.IntegerField(default='0')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_waterpolo', to='Schedule.Team')),
            ],
        ),
        migrations.CreateModel(
            name='WeightLifting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='my date')),
                ('time', models.TimeField()),
                ('duration', models.DurationField(blank=True, null=True)),
                ('category', models.CharField(choices=[('MEN', 'MEN'), ('WOMEN', 'WOMEN')], default='MEN', max_length=20)),
                ('place', models.CharField(max_length=256, null=True)),
                ('game_status', models.CharField(default=-1, max_length=256, null=True)),
                ('score_detail', models.TextField(blank=True, max_length=256)),
                ('game_level', models.CharField(choices=[('Heat 1', 'Heat 1'), ('SemiFinal 1', 'SemiFinal 1'), ('SemiFinal 2', 'SemiFinal 1'), ('Finals', 'Finals'), ('Round 1', 'Round 1'), ('Quarter Final', 'Quarter Final'), ('Semi Final', 'Semi Final'), ('Final', 'Final'), ('Pool A', 'Pool A'), ('Pool B', 'PoolB'), ('Pool C', 'Pool C'), ('Pool D', 'Pool D'), ('Group A', 'Group A'), ('Group B', 'Group B'), ('Group C', 'Group C'), ('Group D', 'Group D'), ('TTF', 'TTF')], max_length=256, null=True)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Event')),
                ('player', models.ManyToManyField(through='Schedule.PlayerWeightLifting', to='Schedule.Player')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WeightLiftingScore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gold', models.IntegerField(default='0')),
                ('silver', models.IntegerField(default='0')),
                ('bronze', models.IntegerField(default='0')),
                ('fourth', models.IntegerField(default='0')),
                ('points', models.IntegerField(default='0')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_weightlifting', to='Schedule.Team')),
            ],
        ),
        migrations.AddField(
            model_name='tabletennisscore',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_tabletennis', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='tabletennis',
            name='team1',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team1_tableTennis', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='tabletennis',
            name='team2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team2_tableTennis', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='swimmingscore',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_swimming', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='staff',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='squashscore',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_squash', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='squash',
            name='team1',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team1_squash', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='squash',
            name='team2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team2_squash', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='profile',
            name='college',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='profile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='playerweightlifting',
            name='weightlifting',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='Schedule.WeightLifting'),
        ),
        migrations.AddField(
            model_name='playerwaterpolo',
            name='waterpolo',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='Schedule.WaterPolo'),
        ),
        migrations.AddField(
            model_name='playervolleyball',
            name='volleyball',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='Schedule.Volleyball'),
        ),
        migrations.AddField(
            model_name='playertennis',
            name='tennis',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='Schedule.Tennis'),
        ),
        migrations.AddField(
            model_name='playertabletennis',
            name='tabletennis',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='Schedule.TableTennis'),
        ),
        migrations.AddField(
            model_name='playerswimming',
            name='swimming',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='Schedule.Swimming'),
        ),
        migrations.AddField(
            model_name='playersquash',
            name='squash',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='Schedule.Squash'),
        ),
        migrations.AddField(
            model_name='player',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='hockeyscore',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_hockey', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='hockey',
            name='player',
            field=models.ManyToManyField(through='Schedule.PlayerHockey', to='Schedule.Player'),
        ),
        migrations.AddField(
            model_name='hockey',
            name='team1',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team1_hockey', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='hockey',
            name='team2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team2_hockey', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='footballscore',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_football', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='football',
            name='player',
            field=models.ManyToManyField(through='Schedule.PlayerFootball', to='Schedule.Player'),
        ),
        migrations.AddField(
            model_name='football',
            name='team1',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team1_football', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='football',
            name='team2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team2_football', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='cricketscore',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_cricket', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='cricket',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Event'),
        ),
        migrations.AddField(
            model_name='cricket',
            name='player',
            field=models.ManyToManyField(through='Schedule.PlayerCricket', to='Schedule.Player'),
        ),
        migrations.AddField(
            model_name='cricket',
            name='team1',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team1_cricket', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='cricket',
            name='team2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team2_cricket', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='basketballscore',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_basketball', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='basketball',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Event'),
        ),
        migrations.AddField(
            model_name='basketball',
            name='player',
            field=models.ManyToManyField(through='Schedule.PlayerBasketball', to='Schedule.Player'),
        ),
        migrations.AddField(
            model_name='basketball',
            name='team1',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team1_basketball', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='basketball',
            name='team2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team2_basketball', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='badmintonscore',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_badminton', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='badminton',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Event'),
        ),
        migrations.AddField(
            model_name='badminton',
            name='player',
            field=models.ManyToManyField(through='Schedule.PlayerBadminton', to='Schedule.Player'),
        ),
        migrations.AddField(
            model_name='badminton',
            name='team1',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team1', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='badminton',
            name='team2',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team2', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='athleticsscore',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teams_athletics', to='Schedule.Team'),
        ),
        migrations.AddField(
            model_name='athletics',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Event'),
        ),
        migrations.AddField(
            model_name='athletics',
            name='player',
            field=models.ManyToManyField(through='Schedule.PlayerAthletics', to='Schedule.Player'),
        ),
        migrations.AddField(
            model_name='answer',
            name='player',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Player'),
        ),
        migrations.AddField(
            model_name='answer',
            name='trivia',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Schedule.Trivia'),
        ),
    ]
